=== tests/cases/compiler/dontWiden.ts ===
const c = [1, 'a'];
>c : Symbol(c, Decl(dontWiden.ts, 0, 5))

const d = { a: 1, b: 'c' };
>d : Symbol(d, Decl(dontWiden.ts, 1, 5))
>a : Symbol(a, Decl(dontWiden.ts, 1, 11))
>b : Symbol(b, Decl(dontWiden.ts, 1, 17))

interface SomeInterface { a: boolean }
>SomeInterface : Symbol(SomeInterface, Decl(dontWiden.ts, 1, 27))
>a : Symbol(SomeInterface.a, Decl(dontWiden.ts, 3, 25))

declare function foo(arg: number[]): void
>foo : Symbol(foo, Decl(dontWiden.ts, 3, 38))
>arg : Symbol(arg, Decl(dontWiden.ts, 4, 21))

declare function bar(arg: SomeInterface): void
>bar : Symbol(bar, Decl(dontWiden.ts, 4, 41))
>arg : Symbol(arg, Decl(dontWiden.ts, 5, 21))
>SomeInterface : Symbol(SomeInterface, Decl(dontWiden.ts, 1, 27))

// As variable assignees
const a: number[] = [1, 2, 3];
>a : Symbol(a, Decl(dontWiden.ts, 8, 5))

const b: SomeInterface = {a: true};
>b : Symbol(b, Decl(dontWiden.ts, 9, 5))
>SomeInterface : Symbol(SomeInterface, Decl(dontWiden.ts, 1, 27))
>a : Symbol(a, Decl(dontWiden.ts, 9, 26))

// Same, but as arguments
foo([1, 2, 3]);
>foo : Symbol(foo, Decl(dontWiden.ts, 3, 38))

bar({a: true});
>bar : Symbol(bar, Decl(dontWiden.ts, 4, 41))
>a : Symbol(a, Decl(dontWiden.ts, 13, 5))

