=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react');
>React : typeof React

const obj = {};
>obj : {}
>{} : {}

const obj1 = {
>obj1 : { x: 2; }
>{    x: 2} : { x: 2; }

    x: 2
>x : number
>2 : 2
}
const obj3 = {
>obj3 : { y: true; overwrite: "hi"; }
>{    y: true,    overwrite: "hi"} : { y: true; overwrite: "hi"; }

    y: true,
>y : boolean
>true : true

    overwrite: "hi"
>overwrite : string
>"hi" : "hi"
}

interface Prop {
>Prop : Prop

    x: number
>x : number

    y: boolean
>y : boolean

    overwrite: string
>overwrite : string
}

class OverWriteAttr extends React.Component<Prop, {}> {
>OverWriteAttr : OverWriteAttr
>React.Component : React.Component<Prop, {}>
>React : typeof React
>Component : typeof React.Component
>Prop : Prop

    render() {
>render : () => JSX.Element

        return <div>Hello</div>;
><div>Hello</div> : JSX.Element
>div : any
>div : any
    }
}

// OK
let x = <OverWriteAttr {...obj} y overwrite="hi" {...obj1} />
>x : JSX.Element
><OverWriteAttr {...obj} y overwrite="hi" {...obj1} /> : JSX.Element
>OverWriteAttr : typeof OverWriteAttr
>obj : {}
>y : true
>overwrite : string
>obj1 : { x: 2; }

let x1 = <OverWriteAttr {...obj1} {...obj3}  />
>x1 : JSX.Element
><OverWriteAttr {...obj1} {...obj3}  /> : JSX.Element
>OverWriteAttr : typeof OverWriteAttr
>obj1 : { x: 2; }
>obj3 : { y: true; overwrite: "hi"; }

